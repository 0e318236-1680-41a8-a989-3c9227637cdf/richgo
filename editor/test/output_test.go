// Code generated by go-bindata.
// sources:
// sample/out_colored.txt
// sample/out_raw.txt
// DO NOT EDIT!

package test

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _coloredTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\x6f\xda\x3c\x14\xbe\xe6\xfd\x0b\xdc\x9c\x57\xd3\x34\xba\x89\xe0\x34\xa3\x1f\xb9\x63\xdd\x3a\x21\xaa\x52\x35\x6c\x37\x51\x55\x05\x30\x60\x61\xc7\x08\x3b\x9b\x2a\xf1\xe3\x27\x1b\x87\x38\xc4\x21\x6b\xa5\x1d\xf5\xe2\xa8\xe7\xeb\x79\x9e\x63\x4e\xda\x71\x10\xb0\x76\xec\xb3\x2f\x3f\x86\x77\x5f\x77\xb0\x24\x72\x95\x4d\xbd\x19\x67\xbd\xf5\x0b\x5f\x5d\x5d\xf4\xb6\x64\xb6\x5a\xf2\x9e\x48\xd8\x86\xe2\xde\x34\x23\x74\xbe\x48\x08\x6d\xc7\x88\xfd\x77\xa8\x06\x65\x3b\x68\xc7\xc1\x05\x3b\xce\x2c\xbc\x67\x89\x85\xf4\x96\x5c\xd5\x86\xed\x38\xe8\xb3\x0b\xed\xfa\x28\x04\xe9\xdd\x72\x0e\x59\x3a\xc7\x0b\x92\xe2\x39\x74\xe4\xcb\x06\xc3\x47\x55\x41\xd2\xa5\x37\x81\x55\x22\x20\xe5\xb0\x20\x98\xce\x81\x6f\x81\x61\xb9\xe2\x73\xb8\xe5\xfc\xcc\x60\xb9\x46\x2c\x9a\x0c\x1e\x27\x3b\x88\x34\x84\xfb\xef\x95\x00\x1c\x42\xbd\x28\x9b\xaa\xe6\x87\xa4\xc0\xd7\x4c\x6e\x07\xc3\x3b\xd8\x41\xb7\xdb\x05\xe5\x86\x30\xc1\x42\xaa\x94\xbc\x10\x3a\xc8\x43\x48\x9c\x15\x25\x86\x7c\xcb\x62\xff\x9c\x2e\xab\x64\xaf\xb5\x0b\x43\xf9\x41\x31\x91\x30\x1e\x79\x9e\x07\x61\xc7\x09\x40\x59\x3d\x88\x02\x7d\x2d\x1c\x65\x8d\x90\xfc\xc0\xc2\x94\x50\xc1\x5d\xc0\x8e\x75\x1d\x8f\x6a\x75\x1d\x8f\x72\x64\x76\x92\x41\x24\x09\xc3\xe1\x39\xf2\x2f\xbb\xc8\xef\x22\x7f\x82\xfc\x50\xff\x7d\x42\xd7\x21\x42\xb9\x0a\xe7\xec\x61\x10\x45\xfa\x31\xe5\x7c\xc7\x23\x9b\xe5\xb9\x53\x70\xbe\x76\xb0\xf3\x2d\x76\xe3\xd1\xff\x95\x11\xca\xec\x31\x05\x78\xe7\xc0\x8a\xa4\xce\xa1\xfd\x63\x49\x8b\xc9\xc7\x4a\x46\x6b\xb2\xb1\x42\xa3\xe1\x43\x89\xb7\x0a\x5b\x40\x0a\x25\x4b\x20\xc4\x9a\x6c\xea\x7e\x59\x70\x62\x70\x94\x4d\x6b\xf7\x68\xe2\xb9\x1e\x16\x4e\xd7\x7e\x4c\x76\x19\xaa\x61\x53\x96\xd8\xd1\xd7\x49\xb0\xa2\xb4\x9b\x64\xbe\xe0\x1a\x96\x13\xc2\x30\xcf\x64\x2d\x4b\x13\xcf\xd1\x94\xd3\x5d\x44\x4d\x06\x74\x02\xeb\x71\x38\xdf\x92\xbb\xb5\x5d\xb8\x3f\x9c\x37\xe3\x9f\xdf\x1e\x77\x80\x3c\xf4\x1e\xe2\xe7\x83\x3d\x39\x6f\x42\xab\xe1\x3a\xb7\x02\x0f\xf9\x9f\xc5\x9b\x6a\x8b\x2b\x0d\xb1\x76\x41\xf9\x78\xfe\x54\x51\xef\x86\xff\xc2\x5b\xd4\x77\xca\x64\x62\xe5\x5f\x8f\xe1\xd8\xdf\x93\x7c\xa7\xac\x4c\xf2\xd0\xa2\x09\xe3\xcc\xb4\x47\x1e\xf2\xfb\xa2\x28\x6f\x9a\x70\x04\x7e\x40\x69\x3d\xfa\x01\xa5\x4e\xf8\x3e\xb2\xba\x6b\x7b\x23\xfe\x84\x52\x45\x00\x5d\x55\x09\x9c\x9c\x91\x5f\xd1\xfd\x17\x31\x84\xdf\xc9\x36\xd5\x4e\xca\xf5\x3f\x05\x48\x0e\xdb\x2c\x2d\x7f\x99\x9b\x1e\xd8\x5f\x63\xc7\x6c\x23\x5f\xd4\x1c\xad\x7e\x20\x5e\x35\xa6\x58\xc0\x3d\xd7\x22\x38\xf5\x37\xb1\x13\xc7\x3e\xdd\x67\xd4\x9e\xbb\x64\x36\xc3\x1b\xf9\x8f\x14\x30\xc3\xf5\xf2\x2e\x5f\xcf\x7f\x7f\x0f\x9b\x87\x28\x6e\xad\xd8\x2c\x15\x16\x84\x62\xb1\x6f\xf3\x27\x00\x00\xff\xff\x6a\x38\xaa\x0a\xac\x09\x00\x00")

func coloredTxtBytes() ([]byte, error) {
	return bindataRead(
		_coloredTxt,
		"colored.txt",
	)
}

func coloredTxt() (*asset, error) {
	bytes, err := coloredTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "colored.txt", size: 2476, mode: os.FileMode(420), modTime: time.Unix(1508761289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rawTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xdd\x8a\xdb\x3c\x10\x86\x8f\xe3\xab\x98\x8f\x8f\xd2\x6c\x4b\x14\xb9\x69\xf6\x47\xb0\x94\x50\xc8\x12\x52\x92\xa5\x4e\x8f\x96\x65\x71\x6c\xc5\x11\x91\x2d\x13\xc9\x2d\xb9\xfb\x22\xc5\xf1\x8f\x22\x67\x97\xb6\x90\x83\x61\x66\xf4\xce\xf3\x4e\xcc\xfc\x0f\x09\x53\xdb\x62\x8d\x22\x91\x0e\x77\x07\xb1\xbd\xbd\x1e\xee\x59\xb4\x4d\xc4\x50\x86\x69\xce\xe9\x70\x5d\x30\x1e\x6f\x42\xc6\x3d\x3b\x51\x47\x2f\x8a\x4a\x85\x12\x41\xae\x89\x8f\x09\x28\x34\x15\x02\x8a\x2c\xa6\x1b\x96\xd1\x18\xfa\xea\x90\x53\xf8\xa0\x9b\x58\x96\xa0\x15\x6c\x43\x09\x99\x80\x0d\xa3\x3c\x06\xb1\x87\x94\xaa\xad\x88\x61\x2a\xc4\x95\x77\x7f\x7f\x0f\xdf\x7f\x2c\x00\x60\x45\xa5\x0a\xcc\xcc\xc5\x43\x47\x7a\x18\x14\x6b\x2d\xbb\x78\xf0\x06\x83\x01\x4c\x27\xb3\x6f\xa4\xd5\x00\x7d\x8c\x30\x96\x57\x5e\xef\x48\xff\x92\x25\x15\xec\x1d\x81\x99\x7a\xaf\x49\x14\x2c\xe7\x08\x21\x20\x7d\x0f\x00\xc0\x2d\x55\xcf\xaa\x44\x75\xb3\x43\xd8\x1f\x95\xca\x21\x97\xa2\x2d\xef\xb2\xb1\x9c\x77\xa4\x4f\x13\x97\x73\x4f\xb1\x94\x92\x4f\xd8\xbf\x19\x60\x7f\x80\xfd\x15\xf6\x89\xf9\x7d\xc4\x77\x04\x63\x63\xfe\x71\x12\x04\xa4\xf5\xfe\xcc\xbc\xd8\xd5\x8c\x7e\xc9\xb8\x9c\xff\x57\x99\x3e\x97\xa8\x11\x9c\xa6\x9b\x82\xe3\xa6\x69\xad\xea\x32\x15\xec\x58\x6e\x68\x83\xf9\xec\x91\x58\x85\x33\x5e\xb9\x63\x79\xe3\xdb\x82\x4e\xc9\xa0\x58\x5f\xaa\x9d\x5c\x54\xd3\x6d\xa3\x65\x5f\xcb\x63\x17\xa5\xa5\xe7\xdc\x4b\x0b\x5c\xaf\xda\x49\xb7\x62\x29\x15\x85\xba\x54\x3b\x4d\x3a\xb5\xba\xe0\xcb\x1a\xf4\x47\x6d\xf8\x8e\x3e\x4b\xb2\x7a\xa6\xbf\x78\x2f\x12\x3f\xe9\x3e\x4c\x28\x01\x8c\xf0\x3b\x10\x1b\x90\x2a\x54\x34\xa5\x99\x92\xa6\xa3\xf7\xca\xbd\xe8\x8d\x10\xf6\x3f\xbf\xad\xb7\x3e\x20\xf0\x64\x42\xd0\x31\x8d\x9f\xad\x8d\x7c\xd5\x50\x78\x6c\x99\x2f\xb3\xd5\xfe\x75\xa5\xc1\x3f\x76\x18\x10\x3b\x80\x57\xa1\xa2\xa3\x6e\x0f\x23\xec\x8f\x65\xef\xb2\xa2\x03\x74\xc2\xb9\x8b\x74\xc2\x79\x17\xaa\x8f\xff\x8a\x35\xe4\x5c\xc3\xe2\xdb\x26\xac\x53\xb3\xbc\xc0\x04\x7e\x85\xfb\xcc\x04\x99\x00\x9d\x94\xa0\x04\xec\x8b\xcc\x26\xfb\x53\x2e\x9a\xe6\xea\xa0\x85\xcd\x16\x47\x4d\xb0\x73\x49\x78\xb2\x28\xec\xff\x7f\x21\xcc\x73\x6b\xab\x65\xb6\x3e\x1a\xd9\x31\xd1\x3c\x18\x61\x14\xd1\x5c\xfd\x2b\x57\xe5\x00\xb3\xec\x9b\xcb\x9e\xbc\x2f\xf0\x26\x41\xb3\xa3\x93\x7f\xd8\x30\x4e\xe5\xb3\xf7\x3b\x00\x00\xff\xff\x21\x99\x34\x3a\x95\x07\x00\x00")

func rawTxtBytes() ([]byte, error) {
	return bindataRead(
		_rawTxt,
		"raw.txt",
	)
}

func rawTxt() (*asset, error) {
	bytes, err := rawTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "raw.txt", size: 1941, mode: os.FileMode(420), modTime: time.Unix(1508758608, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"colored.txt": coloredTxt,
	"raw.txt": rawTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"colored.txt": &bintree{coloredTxt, map[string]*bintree{}},
	"raw.txt": &bintree{rawTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

